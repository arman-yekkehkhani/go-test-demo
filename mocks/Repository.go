// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	models "github.com/arman-yekkehkhani/go-test-demo/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0
func (_m *Repository) Get(_a0 models.ID) (*models.Feature, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Feature
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ID) (*models.Feature, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.ID) *models.Feature); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Feature)
		}
	}

	if rf, ok := ret.Get(1).(func(models.ID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 models.ID
func (_e *Repository_Expecter) Get(_a0 interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *Repository_Get_Call) Run(run func(_a0 models.ID)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ID))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 *models.Feature, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(models.ID) (*models.Feature, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
